definitions:
  contracts.AttendanceRequest:
    properties:
      name:
        type: string
      number:
        type: integer
    type: object
  contracts.ProductCreationRequest:
    properties:
      excludeInPreorder:
        default: false
        type: boolean
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      stopPreorderAt:
        default: 0
        type: integer
      tikkieId:
        type: integer
    required:
    - name
    - price
    - quantity
    - tikkieId
    type: object
  contracts.ProductUpdateRequest:
    properties:
      excludeInPreorder:
        type: boolean
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      stopPreorderAt:
        type: integer
      tikkieId:
        type: integer
    type: object
  contracts.SellCreationRequest:
    properties:
      collectionMode:
        type: string
      name:
        type: string
      productId:
        type: integer
      quantity:
        type: integer
    required:
    - productId
    type: object
  contracts.TikkieRequest:
    properties:
      link:
        type: string
      nickname:
        type: string
    type: object
  contracts.UserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Attendance:
    properties:
      id:
        type: integer
      name:
        type: string
      number:
        type: integer
    type: object
  models.CollectionMode:
    enum:
    - eatIn
    - takeaway
    type: string
    x-enum-varnames:
    - EatIn
    - Takeaway
  models.Product:
    properties:
      available:
        type: integer
      createdAt:
        type: string
      excludeInPreorder:
        default: false
        type: boolean
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      sells:
        items:
          $ref: '#/definitions/models.Sell'
        type: array
      stopPreorderAt:
        default: 0
        type: integer
      tikkie:
        $ref: '#/definitions/models.Tikkie'
      updatedAt:
        type: string
    type: object
  models.Sell:
    properties:
      collectionMode:
        allOf:
        - $ref: '#/definitions/models.CollectionMode'
        default: eatIn
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      quantity:
        type: integer
    type: object
  models.Tikkie:
    properties:
      id:
        type: integer
      link:
        type: string
      nickname:
        type: string
    type: object
  models.User:
    properties:
      id:
        type: integer
      isAdmin:
        type: boolean
      isApproved:
        type: boolean
      joinedAt:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /attendances:
    get:
      description: Get all attendances
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Attendance'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all attendances
      tags:
      - attendances
    post:
      consumes:
      - application/json
      description: Create a new Attendance with the given details
      parameters:
      - description: Attendance details
        in: body
        name: Attendance
        required: true
        schema:
          $ref: '#/definitions/contracts.AttendanceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contracts.AttendanceRequest'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new Attendance
      tags:
      - attendances
  /attendances/{id}:
    delete:
      description: Delete an Attendance by ID
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete an Attendance
      tags:
      - attendances
  /products:
    get:
      consumes:
      - application/json
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a product
      parameters:
      - description: Product Creation Request
        in: body
        name: productCreationRequest
        required: true
        schema:
          $ref: '#/definitions/contracts.ProductCreationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: Product Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a product by Id
      parameters:
      - description: Product Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a product by Id
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product Id
        in: path
        name: id
        required: true
        type: integer
      - description: Product Update Request
        in: body
        name: productUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/contracts.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - products
  /sells/:
    get:
      consumes:
      - application/json
      description: Get all sells
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Sell'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all sells
      tags:
      - sells
    post:
      consumes:
      - application/json
      description: Create Sell by providing product id and optional quantity
      parameters:
      - description: Sell Creation Request
        in: body
        name: sellCreationRequest
        required: true
        schema:
          $ref: '#/definitions/contracts.SellCreationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Sell'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create Sell
      tags:
      - sells
  /sells/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a sell by id
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a sell
      tags:
      - sells
  /sells/{productId}:
    get:
      consumes:
      - application/json
      description: Get sells by product Id
      parameters:
      - description: Product Id
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Sell'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get sells by product Id
      tags:
      - sells
  /tikkies:
    get:
      consumes:
      - application/json
      description: Get all tikkies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tikkie'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get tikkies
      tags:
      - tikkies
    post:
      consumes:
      - application/json
      description: Create a tikkie
      parameters:
      - description: Tikkie creation request
        in: body
        name: tikkieRequest
        required: true
        schema:
          $ref: '#/definitions/contracts.TikkieRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a tikkie
      tags:
      - tikkies
  /users:
    get:
      consumes:
      - application/json
      description: Get All Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: sign up
      parameters:
      - description: User signup request
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/contracts.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: sign up
      tags:
      - users
  /users/token:
    post:
      consumes:
      - application/json
      description: Get token by providing credentials
      parameters:
      - description: User signup request
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/contracts.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Get token
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Enter "Bearer {your_token}" to authenticate.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
